"Timestamp","U1. How many years of professional experience do you have?","U2. What is your gender? (we promote equity and diversity in our study)","U3. Which best describes your role?","Q1. What is the size of your engineering organization?","Q2. On a scale of 1 to 5 where your team or organization positions in practice of DevOps ?","Q3. What is the earliest year your organization started devOps practices?","Q4. What organizational process/training you follow to adapt devOps practices and tools?","Q5. What tools do you use as part of your devOps practice? (You can write additional tools in other box as comma separated)","Q6. What do you think the most critical part of devOps life cycle?","Q7. What difficulties do you face in this critical phase of devOps that you work on?","Q8. When a new project is ready to go live, which devOps part you initiate first?","Q9. Please choose difficulty level for each of the tools/topics below. [Build (Ant, Maven, Gradle)]","Q9. Please choose difficulty level for each of the tools/topics below. [Quality Assurance (SonarQube, Selenium, JMeter, ...)]","Q9. Please choose difficulty level for each of the tools/topics below. [Integration Pipeline (Jenkins, ...)]","Q9. Please choose difficulty level for each of the tools/topics below. [Configuration Automation (Ansible, Chef, Puppet, ...)]","Q9. Please choose difficulty level for each of the tools/topics below. [Containerization & Orchestration (Docker, DockerSwarm, Kubernetes, ...)]","Q9. Please choose difficulty level for each of the tools/topics below. [Cloud Infra Automation (Terraform, CloudFormation, ...)]","Q9. Please choose difficulty level for each of the tools/topics below. [Monitoring (Splunk, ELK, Grafana/Prometheus), ...]","Q10. What are the advantages of the continuous integration tool you primarily use (e.g. Jenkins or Gitlab CI etc.)?","Q11. What challenges you face while using your primary integration tool (you may also mention status of community support)?","Q12. How often your developers face problems related with basic IT Infra (e.g., repository or file settings, user permission settings, scripting syntax or execution permission etc.)","Q13. How often you get solutions from community or Stack Overflow about the devOps problems you  face?","Q14. Which cloud services do you use","Q15. Do you think Cloud infra automation (Terraform, CloudFormation etc.) will be more used in future? If so, why? If not, why?"
"2021/08/03 10:49:04 PM GMT+6","","","","","","","","","","","","","","","","","","","","","","","",""
"2021/08/04 1:10:38 PM GMT+6","6 - 10","","Service or Operations Manager","500+","3","2016","Not Sure","Git;SonarQube;Gitlab CI/CD;Jenkins;Ansible;Docker;Kubernetes;Graphana","Integration","Not sure","Continuous testing","","","","","","","","","","","","Amazon CloudFormation;AWS",""
"2021/08/04 1:39:08 PM GMT+6","2- 5","Male","Development engineer","100","4","2017","Test Automation, Continuous delivery, Contineuous deployment, Docker, Kubernates","Git;Maven;Gradle;Selenium;Jenkins;Docker;Kubernetes;Docket Swarm;Elastic Search/Kibana","Integration","Integration and Tests of different cloud services (for example, some services are in AWS and other in Azure)","Containerization & orchestration","Easy to use, easy to learn","Easy to use, easy to learn","Easy to use, easy to learn","Didn't use","Easy to use after some experience","Easy to use after some experience","Easy to use, easy to learn","Jenkins and Gitlab have lots of guidelines and they are easy to integrate with little fuss with any version controlling system","Integration tools get frequent updates and after few months/years, their plugins can't be used. Even it happened that old version of Jenkins become unsupported after few years and in that case, migration is needed to be done.","Sometimes","Often","AWS","Yes, both tools are for only cloud purpose while other tools are  for local data centers. Even both Terraform and Cloudformation have made integrations lots easier, like when a technology stack is chosen, they offer automatic or default solution and that helps a lot as we can make that work with little custom modification. Also what the tools often show us warning if our chaining or procedure may degrade deployemnt time."
"2021/08/04 6:27:43 PM GMT+6","more than 10","Male","DevOps Engineer","50","5","2016","AWS SAA, CKA, Jekins, Ansible, Docker Compose, Bash Script","Git;Maven;Gradle;ANT;Jenkins;Ansible;Chef;Terraform;CloudFormation;Vagrant;Docker;Kubernetes;Docket Swarm;Elastic Search/Kibana;Graphana","Build","","Complete integration pipeline","Easy to use after some experience","Frequent troubleshooting needed","Easy to use, easy to learn","Easy to use after some experience","Easy to use after some experience","Easy to use after some experience","Frequent troubleshooting needed","Both","Build Fail","Rarely","Sometimes","AWS","Yes, Because by this Infrastructure creation take very less time, its error free, and mainly  suitable for DR."
"2021/08/04 7:53:08 PM GMT+6","6 - 10","Male","Development engineer","50","3","2019","Organizational training, hands on projects and programs for learning, etc.","Git;Maven;Gradle;JMeter;Ansible;Docker;Elastic Search/Kibana","Integration","DevOps adaptation on various dependent and connected system, support and policies.","Complete integration pipeline","Easy to use after some experience","Frequent troubleshooting needed","Frequent troubleshooting needed","Many cases even StackOverflow can't help","Easy to use after some experience","Many cases even StackOverflow can't help","Frequent troubleshooting needed","Automated integration after configuration, easy/web access and monitoring, convenient to adapt continuous delivery, etc.","Not always interconnected and dependent systems can all be put under CI because of policy or support limitations.","Often","Often","AWS;Azure DevOps","Yes. Very convenient for replication, disaster management, and high level supervision."
"2021/08/05 9:13:59 AM GMT+6","6 - 10","Male","Service or Operations Manager","250","3","2019","NA","Git;JMeter;Gitlab CI/CD;Jenkins;Docker;Kubernetes;Prometheus;Graphana","Integration","Automation","Deployment configuration automation","Easy to use after some experience","Didn't use","Easy to use after some experience","Didn't use","Frequent troubleshooting needed","Didn't use","Didn't use","Reduce time","CICD","Always","Always","NA","Yes"
"2021/08/05 9:56:29 AM GMT+6","more than 10","Male","Solution Architect","50","3","2019","Udemy, Plural Sight","Git;Maven;SonarQube;JMeter;Jenkins;Docker;Kubernetes;Elastic Search/Kibana;Prometheus;Graphana","Integration","Security scanning, Integration testing different environment deployment like dev, stage, prod from single point and also multi cluster deployment","Continuous source code build","Easy to use, easy to learn","Many cases even StackOverflow can't help","Easy to use after some experience","Easy to use after some experience","Easy to use after some experience","Didn't use","Many cases even StackOverflow can't help","It is user-friendly, easy to install and does not require additional installations or components. It is free of cost. Easily Configurable. Jenkins can be easily modified and extended. It deploys code instantly, generates test reports. Platform Independent. Jenkins is available for all platforms and different operating systems, whether OS X, Windows or Linux. Rich Plugin ecosystem. The extensive pool of plugins makes Jenkins flexible and allows building, deploying and automating across various platforms.","It taking time to fix critical issues because it needs to search in the community and some time it is not possible to find the solution.","Often","Often","AWS;Private cloud ","Terraform, Ansible, GitOps with ArgoCD"
"2021/08/05 8:37:22 PM GMT+6","more than 10","Male","DevOps Engineer","100","3","2015","We have 3 environments dev, test and production. Build and release Pipelines are present for automated deployment in all 3 environments. Most of the applications are in containerized micro-service base architecture. Using managed Kubenrnetes service for Container orchestration. Managed service for cache, queuing, Databases from cloud providers.  ","Git;JMeter;Gitlab CI/CD;Ansible;CloudFormation;Docker;Kubernetes;Elastic Search/Kibana;Prometheus;Graphana","Monitoring","Monitoring and log analytics are the most critical part in my opinion as very  well balance of automation and manual effort needed in alert, response and escalation/resolution.","Complete integration pipeline","Easy to use after some experience","Easy to use after some experience","Easy to use after some experience","Frequent troubleshooting needed","Easy to use after some experience","Easy to use after some experience","Easy to use after some experience","previously used jenkins, currently using Azure DevOps as we found its easy to use for even juniors in team.","In azure devops we found issues in agents using ansible even community cant help. ","Rarely","Often","Amazon CloudFormation;AWS;Azure DevOps;Azure Kubernetes Service;Azure Iaas, Paas","Its already being used much. As it is mostly used by people having programming exposer, the lack of system and networking knowledge in this set of people is a major problem in my opinion."
"2021/08/05 10:28:50 PM GMT+6","28","Male","Solution Architect","100","3","2016","In development area it started as Git Workflow based process. In systems operations area it was closely modeled against ITIL practices","Git;Gradle;Selenium;JMeter;Gitlab CI/CD;Ansible;Vagrant;Docker;Elastic Search/Kibana;Graphana;Graylog, Protractor, Locust, heavy use of Shell scripting and Python scripts and Gsuite API","Monitoring","Too many tools and practices. Each team must explore do trial and error and settle on what best works for the team. This takes quite a long period and there is a great possibility that teams might lose way somewhere in the middle and management will lose focus","Cloud infra automation","Easy to use, easy to learn","Easy to use after some experience","Easy to use, easy to learn","Frequent troubleshooting needed","Frequent troubleshooting needed","Frequent troubleshooting needed","Many cases even StackOverflow can't help","Gitlab CI is simpler and easier for the specific workflow we are using.","Our experience is whatever integration tool we may chose to use or not there are a lot of glue things every team needs to develop for their own use cases every now and then. So the focus should be not on using one single big/stable tool, rather the focus should be on building a team who can code and tweak existing tools/systems/frameworks","Sometimes","Often","Inhouse OpenStack","I think such tools will be more common and more adopted by teams in coming days"
"2021/08/06 5:36:01 AM GMT+6","6 - 10","Male","Operations engineer","50","4","2020","","Git;Docker;Kubernetes;Docket Swarm;Azure Devops Pipeline","Deployment","","Containerization & orchestration","Easy to use after some experience","Easy to use after some experience","Easy to use after some experience","Easy to use after some experience","Easy to use after some experience","Easy to use after some experience","Easy to use after some experience","","","Rarely","Often","AWS;Azure DevOps","Yes, "
"2021/08/06 8:06:27 AM GMT+6","more than 10","Male","Solution Architect","50","3","2020","Agile","Git;Maven;Gradle;Selenium;Ansible;GitLab CI CD, Graylog","Monitoring","skills of the developers","Did not understand ""ready to go live"", Do you mean ready to start development work or the code base is ready to be deployed in a production system?","Easy to use, easy to learn","Easy to use after some experience","Easy to use after some experience","Frequent troubleshooting needed","Didn't use","Didn't use","Easy to use after some experience","Automated Test and Automated deployment from a single source that the whole development team is contributing to.","Lack of training.","Sometimes","Sometimes","On-premise kvm virtual machines managed by OpenStack and  Proxmox","We have plan to use Terraform and Ansible in future. "
"2021/08/06 8:26:50 AM GMT+6","more than 10","Prefer not to say","Solution Architect","10","2","","","Git;Gradle;Vagrant;Docker","Integration","Lack of organizational training facility","Continuous testing","Easy to use, easy to learn","Didn't use","Didn't use","Didn't use","Easy to use after some experience","Easy to use after some experience","Easy to use after some experience","Used Gitlab CI before. The main advantage is that it works well with Gitlab compared to Jenkins. Less troubleshooting. ","The initial setup is a hurdle for any integration tool.","Often","Always","Bangla Cloud","Yes. To save time and avoid errors."
"2021/08/06 11:16:48 AM GMT+6","6 - 10","Male","Solution Architect","150+","3","2019","Inhouse, Scrum Meeting Discussion","Git;Gitlab CI/CD;Jenkins;Docker;Kubernetes","Integration","Environment provisioning, Configuration, Expert Resources etc.","Monitoring","Easy to use, easy to learn","Easy to use, easy to learn","Easy to use after some experience","Didn't use","Frequent troubleshooting needed","Didn't use","Didn't use","Easy to manage/track changes, minimizing the impact.","Setup, configuration.","Often","Often","On premise VMs","Yes. Wide range of applications will be on cloud-native infrastructure. So automation of these infra is a must thing for upcoming days.."
"2021/08/08 11:13:00 AM GMT+6","more than 10","Male","Solution Architect","140+","4","2014","Knowledge Sharing sessions, training of new hires","Git;Maven;Gradle;ANT;Selenium;JMeter;Jenkins;Docker;Kubernetes;GitHub Actions, Cypress, Jest, pm2 (for node.js apps)","Deployment","So many things can go wrong during deployment. Deactivating the currently running version while deploying the new one is complicated with full ecosystem support. Without properly testing the deployment during staging, migration can go wrong. For large applications in Java, it still needs manual intervention.","Deployment configuration automation","Easy to use, easy to learn","Easy to use after some experience","Frequent troubleshooting needed","Didn't use","Easy to use after some experience","Didn't use","Easy to use after some experience","Easy","None","Sometimes","Often","AWS","They might be used, but only for large enough projects. 90% projects or systems can be broken down into smaller components and managed with easier tools."
"2021/08/08 12:16:45 PM GMT+6","more than 10","Male","DevOps Engineer","150","4","2018","Communications and collaboration planning, Continuous development, Continuous integration, Continuous testing, Continuous deployment. Tools- Git, Jenkins,Ansible,Docker etc","Git;Maven;Gradle;JMeter;Gitlab CI/CD;Jenkins;Ansible;Docker;Docket Swarm;Elastic Search/Kibana;Prometheus;Graphana","Integration","Multiple platform integration ","Complete integration pipeline","Easy to use after some experience","Easy to use after some experience","Easy to use after some experience","Easy to use after some experience","Easy to use after some experience","Didn't use","Easy to use after some experience","Jenkins","To design a pipeline for complicated integration ","Rarely","Often","AWS;Azure DevOps","Managing infrastructure as a code "
"2021/08/09 12:00:56 PM GMT+6","2- 5","Male","Development engineer","32","3","2019","No, particular organizational training . I have learnt from senior devOps engineers, documentation and online courses. ","Git;Maven;Gradle;JMeter;Jenkins;Docker;Elastic Search/Kibana","Fixing Deployment Architecture","Architecture Establishment, Troubleshooting issues by log","Deployment configuration automation","Easy to use after some experience","Easy to use, easy to learn","Easy to use after some experience","Didn't use","Easy to use after some experience","Didn't use","Easy to use after some experience","To deploy the code without much  manual intervention","Version of different tools (in fact compatibility)  and commmonity support is good but sometimes there are problems regarding versions","Sometimes","Often","AWS","Yes , Promising . To make the data centres and systems entirely configurable  is going to be the demand for the next generation devOps engineers where they will make all the cloud infrastruction configuration settings possibly only by the code they will write"
"2021/08/09 12:36:33 PM GMT+6","more than 10","Male","Solution Architect","50","4","2019","","Git;Subversion;Maven;Gradle;ANT;Selenium;JMeter;Gitlab CI/CD;Jenkins;Ansible;Docker;Kubernetes;Elastic Search/Kibana;Prometheus;Graphana;Logstash/Flentd","Deployment","1. Configuration management for different environment with traditional tools  
2. Debugging in kubernetes environment","Containerization & orchestration","Easy to use after some experience","Easy to use after some experience","Easy to use, easy to learn","Easy to use after some experience","Many cases even StackOverflow can't help","Didn't use","Frequent troubleshooting needed","1. Provides lots of plugin for deployment lifecycle
2. Easy to operate & configure
3. Different alternatives in each step of deployment lifecycle","1. Workflow design for complex deployment architecture
2. Multiple jobs can not be deployed at a time, difficult to manage microservice deployment
Jenkins has a very good support from the community","Rarely","Often","AWS",""
"2021/08/10 3:59:59 PM GMT+6","more than 10","Male","Development engineer","10","4","2018","","Git;Docker;CircleCI CI/CD","Monitoring","","Continuous source code build","Easy to use, easy to learn","Easy to use, easy to learn","Easy to use after some experience","Didn't use","Frequent troubleshooting needed","Didn't use","Didn't use","Easier-to-use, Low-cost","Lack of sample config files for various use-cases","Always","Often","AWS",""
"2021/08/11 9:47:08 PM GMT+6","more than 10","Male","Development manager","50","4","2013","This question leaves room for different interpretations. Anyway, we try to automate any operation that's possible to do that way and engage developers in that. Self-exploration, learning/sharing and asking for assessment by others is the basis for staying up to date in this area for us.","Git;Maven;Gradle;ANT;Selenium;SonarQube;Jenkins;Ansible;Docker;Kubernetes;Elastic Search/Kibana;Bamboo, SWTBot, Custom javascript tools, Python, SQLite/PostgreSQL(massive test data handling), Apache, FCGI, bash scripting and many other C++ custom programs/tools. etc. Not listing the ones we moved on from.","For us it's first testing, then logging, then reversibility of deployment. Sorry for unasked part of this answer.","As it’s testing, biggest challenge is the time to test the AUT. Ensuring that the testcases are persistently added/updated as necessary.","Continuous testing","Easy to use after some experience","Easy to use after some experience","Easy to use, easy to learn","Easy to use, easy to learn","Frequent troubleshooting needed","Didn't use","Easy to use after some experience","Fast feedback to developers.
Higher confidence in response to positive results from CI leads to faster development while ensuring quality. 
","Version updating, plugins incompatibility across versions","Rarely","Sometimes","AWS;Azure Kubernetes Service","That's possible,  specially those tools that can be used across different cloud providers. Demand of  SAAS and cheaper operations cost will drive this."
"2021/08/23 2:25:45 AM GMT+6","6 - 10","Male","Development engineer","100","5","2017","1. Any new process is documented in a shared space (Notion)
2. Documents are shared with newly hired engineers during onboarding. There's no formal training though, most of the knowledge transfer is done ad-hoc by the mentor or other senior engineers.
3. Unfortunately, not all the existing processes are documented - it's a work in progress.","Git;Jenkins;Terraform;Docker;Elastic Search/Kibana;Prometheus;Graphana","Monitoring","","Monitoring","Didn't use","Didn't use","Easy to use after some experience","Easy to use after some experience","Frequent troubleshooting needed","Easy to use after some experience","Frequent troubleshooting needed","","","Sometimes","Sometimes","AWS","Yes. As the cloud service providers like AWS keep offering more products/services across the software development pipeline (code repo, CI/CD, monitoring/alerting, auditing, security etc), it will become more common to build a complete consumer application using native cloud components. So keeping the infrastructure together with code would make more sense."
"2021/08/26 4:36:01 AM GMT+6","more than 10","Male","Development engineer","500","4","2017","","Git;Maven;SonarQube;Jenkins;Terraform;Docker;Elastic Search/Kibana","Integration","Keeping engineers aligned with devops practices ","Complete integration pipeline","Easy to use after some experience","Easy to use after some experience","Easy to use after some experience","Frequent troubleshooting needed","Many cases even StackOverflow can't help","Many cases even StackOverflow can't help","Frequent troubleshooting needed","Jenkins - it's extensive and easy to use","","Often","Often","AWS","Yes. Cloud is going to be de facto for infra. Kubernetes takes this one step ahead. Terraform is helping to avoid vendor-locked situation and helping to implement infra as code for cloud as well"